//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LlamaLang.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;
using LlamaLangCompiler;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
public partial class LlamaLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, FUNC=2, RETURN=3, IDENTIFIER=4, L_PAREN=5, R_PAREN=6, L_CURLY=7, 
		R_CURLY=8, L_BRACKET=9, R_BRACKET=10, ASSIGN=11, COMMA=12, SEMI=13, COLON=14, 
		DOT=15, PLUS_PLUS=16, MINUS_MINUS=17, DECLARE_ASSIGN=18, ELLIPSIS=19, 
		LOGICAL_OR=20, LOGICAL_AND=21, EQUALS=22, NOT_EQUALS=23, LESS=24, LESS_OR_EQUALS=25, 
		GREATER=26, GREATER_OR_EQUALS=27, OR=28, DIV=29, MOD=30, LSHIFT=31, RSHIFT=32, 
		BIT_CLEAR=33, EXCLAMATION=34, PLUS=35, MINUS=36, CARET=37, STAR=38, AMPERSAND=39, 
		ARROW=40, DECIMAL_LIT=41, OCTAL_LIT=42, HEX_LIT=43, FLOAT_LIT=44, RUNE_LIT=45, 
		INTERPRETED_STRING_LIT=46, WS=47, COMMENT=48, TERMINATOR=49, LINE_COMMENT=50;
	public const int
		RULE_sourceFile = 0, RULE_identifierList = 1, RULE_expressionList = 2, 
		RULE_functionDecl = 3, RULE_varDecl = 4, RULE_varSpec = 5, RULE_block = 6, 
		RULE_statementList = 7, RULE_statement = 8, RULE_simpleStmt = 9, RULE_expressionStmt = 10, 
		RULE_assignment = 11, RULE_assign_op = 12, RULE_emptyStmt = 13, RULE_returnStmt = 14, 
		RULE_type_ = 15, RULE_pointer = 16, RULE_array = 17, RULE_typeName = 18, 
		RULE_signature = 19, RULE_result = 20, RULE_parameters = 21, RULE_parameterDecl = 22, 
		RULE_expression = 23, RULE_primaryExpr = 24, RULE_unaryExpr = 25, RULE_conversion = 26, 
		RULE_operand = 27, RULE_unaryOp = 28, RULE_literal = 29, RULE_basicLit = 30, 
		RULE_integer = 31, RULE_operandName = 32, RULE_qualifiedIdent = 33, RULE_literalType = 34, 
		RULE_fieldDecl = 35, RULE_string_ = 36, RULE_arguments = 37, RULE_methodExpr = 38, 
		RULE_receiverType = 39, RULE_eos = 40;
	public static readonly string[] ruleNames = {
		"sourceFile", "identifierList", "expressionList", "functionDecl", "varDecl", 
		"varSpec", "block", "statementList", "statement", "simpleStmt", "expressionStmt", 
		"assignment", "assign_op", "emptyStmt", "returnStmt", "type_", "pointer", 
		"array", "typeName", "signature", "result", "parameters", "parameterDecl", 
		"expression", "primaryExpr", "unaryExpr", "conversion", "operand", "unaryOp", 
		"literal", "basicLit", "integer", "operandName", "qualifiedIdent", "literalType", 
		"fieldDecl", "string_", "arguments", "methodExpr", "receiverType", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<-'", "'func'", "'return'", null, "'('", "')'", "'{'", "'}'", 
		"'['", "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", "':='", 
		"'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
		"'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", "'!'", "'+'", "'-'", "'^'", 
		"'*'", "'&'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "FUNC", "RETURN", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", 
		"R_CURLY", "L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", 
		"DOT", "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", 
		"LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", 
		"EXCLAMATION", "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", "ARROW", 
		"DECIMAL_LIT", "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "RUNE_LIT", "INTERPRETED_STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LlamaLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LlamaLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LlamaLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LlamaLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUNC || _la==IDENTIFIER) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FUNC:
					{
					State = 82;
					functionDecl();
					}
					break;
				case IDENTIFIER:
					{
					State = 83;
					varDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LlamaLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LlamaLangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LlamaLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LlamaLangParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 2, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(IDENTIFIER);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 92;
				Match(COMMA);
				State = 93;
				Match(IDENTIFIER);
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LlamaLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LlamaLangParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 4, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			expression(0);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 100;
					Match(COMMA);
					State = 101;
					expression(0);
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(LlamaLangParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LlamaLangParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(FUNC);
			State = 108;
			Match(IDENTIFIER);
			State = 109;
			signature();
			State = 110;
			Match(ARROW);
			State = 111;
			type_();
			State = 112;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext varSpec() {
			return GetRuleContext<VarSpecContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			varSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LlamaLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LlamaLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 10, RULE_varSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			identifierList();
			State = 117;
			Match(COLON);
			State = 118;
			type_();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 119;
				Match(ASSIGN);
				State = 120;
				expressionList();
				}
			}

			State = 123;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(LlamaLangParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(LlamaLangParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(L_CURLY);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << DECIMAL_LIT) | (1L << OCTAL_LIT) | (1L << HEX_LIT) | (1L << FLOAT_LIT) | (1L << RUNE_LIT) | (1L << INTERPRETED_STRING_LIT))) != 0)) {
				{
				State = 126;
				statementList();
				}
			}

			State = 129;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 14, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 131;
				statement();
				State = 132;
				eos();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << RETURN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << SEMI) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << DECIMAL_LIT) | (1L << OCTAL_LIT) | (1L << HEX_LIT) | (1L << FLOAT_LIT) | (1L << RUNE_LIT) | (1L << INTERPRETED_STRING_LIT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				simpleStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 140;
				returnStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 141;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStmtContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStmtContext expressionStmt() {
			return GetRuleContext<ExpressionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStmtContext emptyStmt() {
			return GetRuleContext<EmptyStmtContext>(0);
		}
		public SimpleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStmtContext simpleStmt() {
		SimpleStmtContext _localctx = new SimpleStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_simpleStmt);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				expressionStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				emptyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStmtContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStmtContext expressionStmt() {
		ExpressionStmtContext _localctx = new ExpressionStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_expressionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			expressionList();
			State = 152;
			assign_op();
			State = 153;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LlamaLangParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LlamaLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LlamaLangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LlamaLangParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LlamaLangParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LlamaLangParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LlamaLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(LlamaLangParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(LlamaLangParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(LlamaLangParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(LlamaLangParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(LlamaLangParser.BIT_CLEAR, 0); }
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 24, RULE_assign_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) {
				{
				State = 155;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 158;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LlamaLangParser.SEMI, 0); }
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_emptyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LlamaLangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(RETURN);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << DECIMAL_LIT) | (1L << OCTAL_LIT) | (1L << HEX_LIT) | (1L << FLOAT_LIT) | (1L << RUNE_LIT) | (1L << INTERPRETED_STRING_LIT))) != 0)) {
				{
				State = 163;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 30, RULE_type_);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				typeName();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				pointer();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 168;
				array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LlamaLangParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 32, RULE_pointer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(STAR);
			State = 172;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(LlamaLangParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(LlamaLangParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(L_BRACKET);
			State = 175;
			Match(R_BRACKET);
			State = 176;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeName);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				qualifiedIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 38, RULE_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 40, RULE_result);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				parameters();
				}
				break;
			case IDENTIFIER:
			case L_BRACKET:
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				type_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(LlamaLangParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(LlamaLangParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LlamaLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LlamaLangParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(L_PAREN);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 189;
				parameterDecl();
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 190;
					Match(COMMA);
					State = 191;
					parameterDecl();
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 199;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LlamaLangParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(IDENTIFIER);
			State = 202;
			Match(COLON);
			State = 203;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LlamaLangParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LlamaLangParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(LlamaLangParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(LlamaLangParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(LlamaLangParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(LlamaLangParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(LlamaLangParser.BIT_CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LlamaLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LlamaLangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LlamaLangParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LlamaLangParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LlamaLangParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(LlamaLangParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(LlamaLangParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(LlamaLangParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(LlamaLangParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(LlamaLangParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(LlamaLangParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(LlamaLangParser.LOGICAL_OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 206;
				primaryExpr(0);
				}
				break;
			case 2:
				{
				State = 207;
				unaryExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 225;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 211;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 212;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 214;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 215;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 217;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << LESS) | (1L << LESS_OR_EQUALS) | (1L << GREATER) | (1L << GREATER_OR_EQUALS))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 218;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 220;
						Match(LOGICAL_AND);
						State = 221;
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 223;
						Match(LOGICAL_OR);
						State = 224;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LlamaLangParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		return primaryExpr(0);
	}

	private PrimaryExprContext primaryExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, _parentState);
		PrimaryExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_primaryExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 231;
				operand();
				}
				break;
			case 2:
				{
				State = 232;
				conversion();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
					State = 235;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 239;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
						{
						State = 236;
						Match(DOT);
						State = 237;
						Match(IDENTIFIER);
						}
						break;
					case L_PAREN:
						{
						State = 238;
						arguments();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_unaryExpr);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				primaryExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				unaryOp();
				State = 248;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(LlamaLangParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(LlamaLangParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LlamaLangParser.COMMA, 0); }
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 52, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			type_();
			State = 253;
			Match(L_PAREN);
			State = 254;
			expression(0);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 255;
				Match(COMMA);
				}
			}

			State = 258;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandNameContext operandName() {
			return GetRuleContext<OperandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodExprContext methodExpr() {
			return GetRuleContext<MethodExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(LlamaLangParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(LlamaLangParser.R_PAREN, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 54, RULE_operand);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				operandName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 262;
				methodExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 263;
				Match(L_PAREN);
				State = 264;
				expression(0);
				State = 265;
				Match(R_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LlamaLangParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LlamaLangParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(LlamaLangParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LlamaLangParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LlamaLangParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(LlamaLangParser.AMPERSAND, 0); }
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 56, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicLitContext basicLit() {
			return GetRuleContext<BasicLitContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 58, RULE_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			basicLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicLitContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(LlamaLangParser.FLOAT_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(LlamaLangParser.RUNE_LIT, 0); }
		public BasicLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicLit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicLitContext basicLit() {
		BasicLitContext _localctx = new BasicLitContext(Context, State);
		EnterRule(_localctx, 60, RULE_basicLit);
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				integer();
				}
				break;
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				string_();
				}
				break;
			case FLOAT_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				Match(FLOAT_LIT);
				}
				break;
			case RUNE_LIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 276;
				Match(RUNE_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(LlamaLangParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(LlamaLangParser.OCTAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(LlamaLangParser.HEX_LIT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 62, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LIT) | (1L << OCTAL_LIT) | (1L << HEX_LIT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_operandName);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				qualifiedIdent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LlamaLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LlamaLangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LlamaLangParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 66, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(IDENTIFIER);
			State = 286;
			Match(DOT);
			State = 287;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_literalType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 70, RULE_fieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			identifierList();
			State = 292;
			type_();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERPRETED_STRING_LIT) {
				{
				State = 293;
				string_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(LlamaLangParser.INTERPRETED_STRING_LIT, 0); }
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 72, RULE_string_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(INTERPRETED_STRING_LIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(LlamaLangParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(LlamaLangParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(LlamaLangParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LlamaLangParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LlamaLangParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 74, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(L_PAREN);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << DECIMAL_LIT) | (1L << OCTAL_LIT) | (1L << HEX_LIT) | (1L << FLOAT_LIT) | (1L << RUNE_LIT) | (1L << INTERPRETED_STRING_LIT))) != 0)) {
				{
				State = 305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 299;
					expressionList();
					}
					break;
				case 2:
					{
					State = 300;
					type_();
					State = 303;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 301;
						Match(COMMA);
						State = 302;
						expressionList();
						}
						break;
					}
					}
					break;
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSIS) {
					{
					State = 307;
					Match(ELLIPSIS);
					}
				}

				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 310;
					Match(COMMA);
					}
				}

				}
			}

			State = 315;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodExprContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LlamaLangParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LlamaLangParser.IDENTIFIER, 0); }
		public MethodExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodExprContext methodExpr() {
		MethodExprContext _localctx = new MethodExprContext(Context, State);
		EnterRule(_localctx, 76, RULE_methodExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			receiverType();
			State = 318;
			Match(DOT);
			State = 319;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(LlamaLangParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(LlamaLangParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LlamaLangParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverTypeContext receiverType() {
			return GetRuleContext<ReceiverTypeContext>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_receiverType);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				typeName();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				Match(L_PAREN);
				State = 326;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 323;
					Match(STAR);
					State = 324;
					typeName();
					}
					break;
				case IDENTIFIER:
				case L_PAREN:
					{
					State = 325;
					receiverType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 328;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : LlamaLangParseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LlamaLangParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LlamaLangParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILlamaLangVisitor<TResult> typedVisitor = visitor as ILlamaLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 80, RULE_eos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==SEMI) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 24: return primaryExpr_sempred((PrimaryExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExpr_sempred(PrimaryExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x151', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'W', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'Z', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x61', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x64', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'i', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', 'l', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '|', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\x82', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\x89', '\n', 
		'\t', '\r', '\t', '\xE', '\t', '\x8A', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x91', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x96', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x5', '\xE', '\x9F', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA7', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xAC', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xB7', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xBD', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xC3', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xC6', '\v', '\x17', '\x5', 
		'\x17', '\xC8', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xD3', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\xE4', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xE7', '\v', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xEC', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\xF2', '\n', '\x1A', '\a', '\x1A', '\xF4', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\xF7', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xFD', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x103', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x10E', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x118', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x11E', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x129', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x132', '\n', 
		'\'', '\x5', '\'', '\x134', '\n', '\'', '\x3', '\'', '\x5', '\'', '\x137', 
		'\n', '\'', '\x3', '\'', '\x5', '\'', '\x13A', '\n', '\'', '\x5', '\'', 
		'\x13C', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x5', ')', '\x149', '\n', ')', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x14D', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x2', '\x4', 
		'\x30', '\x32', '+', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', '\x2', 
		'\t', '\x4', '\x2', '\x1E', '#', '%', ')', '\x4', '\x2', '\x1F', '#', 
		'(', ')', '\x4', '\x2', '\x1E', '\x1E', '%', '\'', '\x3', '\x2', '\x18', 
		'\x1D', '\x4', '\x2', '\x3', '\x3', '$', ')', '\x3', '\x2', '+', '-', 
		'\x3', '\x3', '\xF', '\xF', '\x2', '\x155', '\x2', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ']', '\x3', '\x2', '\x2', '\x2', '\x6', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'm', '\x3', '\x2', '\x2', '\x2', '\n', 't', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'v', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x10', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x90', '\x3', '\x2', '\x2', '\x2', '\x14', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x97', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xAB', '\x3', '\x2', '\x2', '\x2', '\"', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xB0', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '(', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xBC', '\x3', '\x2', '\x2', '\x2', ',', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x30', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x36', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x10D', '\x3', '\x2', '\x2', '\x2', ':', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x117', '\x3', '\x2', '\x2', '\x2', '@', '\x119', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x44', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x125', '\x3', '\x2', '\x2', '\x2', 'J', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x12C', '\x3', '\x2', '\x2', '\x2', 'N', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x14E', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x5', '\b', '\x5', 
		'\x2', 'U', 'W', '\x5', '\n', '\x6', '\x2', 'V', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x5', 'R', '*', '\x2', '\\', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ']', '\x62', '\a', '\x6', '\x2', '\x2', '^', '_', '\a', '\xE', 
		'\x2', '\x2', '_', '\x61', '\a', '\x6', '\x2', '\x2', '`', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x5', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'j', '\x5', '\x30', '\x19', '\x2', '\x66', 
		'g', '\a', '\xE', '\x2', '\x2', 'g', 'i', '\x5', '\x30', '\x19', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\a', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\a', '\x4', '\x2', '\x2', 'n', 'o', '\a', '\x6', 
		'\x2', '\x2', 'o', 'p', '\x5', '(', '\x15', '\x2', 'p', 'q', '\a', '*', 
		'\x2', '\x2', 'q', 'r', '\x5', ' ', '\x11', '\x2', 'r', 's', '\x5', '\xE', 
		'\b', '\x2', 's', '\t', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x5', '\f', 
		'\a', '\x2', 'u', '\v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\x4', 
		'\x3', '\x2', 'w', 'x', '\a', '\x10', '\x2', '\x2', 'x', '{', '\x5', ' ', 
		'\x11', '\x2', 'y', 'z', '\a', '\r', '\x2', '\x2', 'z', '|', '\x5', '\x6', 
		'\x4', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x5', 'R', 
		'*', '\x2', '~', '\r', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', '\a', 
		'\t', '\x2', '\x2', '\x80', '\x82', '\x5', '\x10', '\t', '\x2', '\x81', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', 
		'\n', '\x2', '\x2', '\x84', '\xF', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x5', '\x12', '\n', '\x2', '\x86', '\x87', '\x5', 'R', '*', '\x2', 
		'\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x91', '\x5', '\n', 
		'\x6', '\x2', '\x8D', '\x91', '\x5', '\x14', '\v', '\x2', '\x8E', '\x91', 
		'\x5', '\x1E', '\x10', '\x2', '\x8F', '\x91', '\x5', '\xE', '\b', '\x2', 
		'\x90', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x96', '\x5', '\x16', '\f', '\x2', '\x93', '\x96', '\x5', '\x18', 
		'\r', '\x2', '\x94', '\x96', '\x5', '\x1C', '\xF', '\x2', '\x95', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\x5', '\x30', '\x19', '\x2', '\x98', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x6', '\x4', '\x2', 
		'\x9A', '\x9B', '\x5', '\x1A', '\xE', '\x2', '\x9B', '\x9C', '\x5', '\x6', 
		'\x4', '\x2', '\x9C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', 
		'\t', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\a', '\r', '\x2', '\x2', '\xA1', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\xF', '\x2', '\x2', 
		'\xA3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\a', '\x5', 
		'\x2', '\x2', '\xA5', '\xA7', '\x5', '\x30', '\x19', '\x2', '\xA6', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAC', '\x5', '&', 
		'\x14', '\x2', '\xA9', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAA', '\xAC', 
		'\x5', '$', '\x13', '\x2', '\xAB', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '!', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\a', '(', '\x2', '\x2', '\xAE', '\xAF', '\x5', ' ', '\x11', '\x2', '\xAF', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\v', '\x2', '\x2', 
		'\xB1', '\xB2', '\a', '\f', '\x2', '\x2', '\xB2', '\xB3', '\x5', '&', 
		'\x14', '\x2', '\xB3', '%', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', 
		'\a', '\x6', '\x2', '\x2', '\xB5', '\xB7', '\x5', '\x44', '#', '\x2', 
		'\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\'', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\x5', ',', '\x17', '\x2', '\xB9', ')', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBD', '\x5', ',', '\x17', '\x2', '\xBB', '\xBD', '\x5', ' ', '\x11', 
		'\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '+', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC7', '\a', '\a', '\x2', '\x2', '\xBF', '\xC4', '\x5', '.', '\x18', 
		'\x2', '\xC0', '\xC1', '\a', '\xE', '\x2', '\x2', '\xC1', '\xC3', '\x5', 
		'.', '\x18', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\b', '\x2', '\x2', '\xCA', '-', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', 
		'\a', '\x6', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x10', '\x2', '\x2', 
		'\xCD', '\xCE', '\x5', ' ', '\x11', '\x2', '\xCE', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\b', '\x19', '\x1', '\x2', '\xD0', '\xD3', 
		'\x5', '\x32', '\x1A', '\x2', '\xD1', '\xD3', '\x5', '\x34', '\x1B', '\x2', 
		'\xD2', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', 
		'\f', '\a', '\x2', '\x2', '\xD5', '\xD6', '\t', '\x3', '\x2', '\x2', '\xD6', 
		'\xE4', '\x5', '\x30', '\x19', '\b', '\xD7', '\xD8', '\f', '\x6', '\x2', 
		'\x2', '\xD8', '\xD9', '\t', '\x4', '\x2', '\x2', '\xD9', '\xE4', '\x5', 
		'\x30', '\x19', '\a', '\xDA', '\xDB', '\f', '\x5', '\x2', '\x2', '\xDB', 
		'\xDC', '\t', '\x5', '\x2', '\x2', '\xDC', '\xE4', '\x5', '\x30', '\x19', 
		'\x6', '\xDD', '\xDE', '\f', '\x4', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		'\x17', '\x2', '\x2', '\xDF', '\xE4', '\x5', '\x30', '\x19', '\x5', '\xE0', 
		'\xE1', '\f', '\x3', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x16', '\x2', 
		'\x2', '\xE2', '\xE4', '\x5', '\x30', '\x19', '\x4', '\xE3', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\b', 
		'\x1A', '\x1', '\x2', '\xE9', '\xEC', '\x5', '\x38', '\x1D', '\x2', '\xEA', 
		'\xEC', '\x5', '\x36', '\x1C', '\x2', '\xEB', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xF1', '\f', '\x3', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '\x11', '\x2', '\x2', '\xEF', '\xF2', '\a', '\x6', '\x2', 
		'\x2', '\xF0', '\xF2', '\x5', 'L', '\'', '\x2', '\xF1', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xFD', '\x5', '\x32', '\x1A', '\x2', '\xF9', '\xFA', '\x5', 
		':', '\x1E', '\x2', '\xFA', '\xFB', '\x5', '\x30', '\x19', '\x2', '\xFB', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x5', ' ', '\x11', '\x2', '\xFF', 
		'\x100', '\a', '\a', '\x2', '\x2', '\x100', '\x102', '\x5', '\x30', '\x19', 
		'\x2', '\x101', '\x103', '\a', '\xE', '\x2', '\x2', '\x102', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', 
		'\b', '\x2', '\x2', '\x105', '\x37', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x10E', '\x5', '<', '\x1F', '\x2', '\x107', '\x10E', '\x5', '\x42', '\"', 
		'\x2', '\x108', '\x10E', '\x5', 'N', '(', '\x2', '\x109', '\x10A', '\a', 
		'\a', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x30', '\x19', '\x2', '\x10B', 
		'\x10C', '\a', '\b', '\x2', '\x2', '\x10C', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\t', '\x6', '\x2', '\x2', '\x110', 
		';', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x5', '>', ' ', '\x2', 
		'\x112', '=', '\x3', '\x2', '\x2', '\x2', '\x113', '\x118', '\x5', '@', 
		'!', '\x2', '\x114', '\x118', '\x5', 'J', '&', '\x2', '\x115', '\x118', 
		'\a', '.', '\x2', '\x2', '\x116', '\x118', '\a', '/', '\x2', '\x2', '\x117', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x117', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\t', '\a', '\x2', '\x2', '\x11A', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x11B', '\x11E', '\a', '\x6', '\x2', '\x2', '\x11C', '\x11E', 
		'\x5', '\x44', '#', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x6', '\x2', '\x2', '\x120', 
		'\x121', '\a', '\x11', '\x2', '\x2', '\x121', '\x122', '\a', '\x6', '\x2', 
		'\x2', '\x122', '\x45', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\x5', '&', '\x14', '\x2', '\x124', 'G', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x126', '\x5', '\x4', '\x3', '\x2', '\x126', '\x128', '\x5', ' ', '\x11', 
		'\x2', '\x127', '\x129', '\x5', 'J', '&', '\x2', '\x128', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x30', '\x2', 
		'\x2', '\x12B', 'K', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x13B', '\a', 
		'\a', '\x2', '\x2', '\x12D', '\x134', '\x5', '\x6', '\x4', '\x2', '\x12E', 
		'\x131', '\x5', ' ', '\x11', '\x2', '\x12F', '\x130', '\a', '\xE', '\x2', 
		'\x2', '\x130', '\x132', '\x5', '\x6', '\x4', '\x2', '\x131', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x134', '\x3', '\x2', '\x2', '\x2', '\x133', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\a', '\x15', '\x2', 
		'\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x13A', '\a', '\xE', '\x2', '\x2', '\x139', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '\b', '\x2', '\x2', 
		'\x13E', 'M', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x5', 'P', 
		')', '\x2', '\x140', '\x141', '\a', '\x11', '\x2', '\x2', '\x141', '\x142', 
		'\a', '\x6', '\x2', '\x2', '\x142', 'O', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x14D', '\x5', '&', '\x14', '\x2', '\x144', '\x148', '\a', '\a', '\x2', 
		'\x2', '\x145', '\x146', '\a', '(', '\x2', '\x2', '\x146', '\x149', '\x5', 
		'&', '\x14', '\x2', '\x147', '\x149', '\x5', 'P', ')', '\x2', '\x148', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', 
		'\a', '\b', '\x2', '\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x143', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', 'Q', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\t', '\b', '\x2', '\x2', '\x14F', 'S', '\x3', '\x2', '\x2', 
		'\x2', '%', 'V', 'X', '\x62', 'j', '{', '\x81', '\x8A', '\x90', '\x95', 
		'\x9E', '\xA6', '\xAB', '\xB6', '\xBC', '\xC4', '\xC7', '\xD2', '\xE3', 
		'\xE5', '\xEB', '\xF1', '\xF5', '\xFC', '\x102', '\x10D', '\x117', '\x11D', 
		'\x128', '\x131', '\x133', '\x136', '\x139', '\x13B', '\x148', '\x14C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
